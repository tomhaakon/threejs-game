import {
  __commonJS
} from "./chunk-6TJCVOLN.js";

// node_modules/keydrown/dist/keydrown.js
var require_keydrown = __commonJS({
  "node_modules/keydrown/dist/keydrown.js"(exports, module) {
    (function(window2) {
      var util = function() {
        var util2 = {};
        util2.forEach = function(obj, iterator) {
          var prop;
          for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
              iterator(obj[prop], prop);
            }
          }
        };
        var forEach = util2.forEach;
        util2.getTranspose = function(obj) {
          var transpose = {};
          forEach(obj, function(val, key) {
            transpose[val] = key;
          });
          return transpose;
        };
        util2.indexOf = function(arr, val) {
          if (arr.indexOf) {
            return arr.indexOf(val);
          }
          var i, len = arr.length;
          for (i = 0; i < len; i++) {
            if (arr[i] === val) {
              return i;
            }
          }
          return -1;
        };
        var indexOf = util2.indexOf;
        util2.pushUnique = function(arr, val) {
          if (indexOf(arr, val) === -1) {
            arr.push(val);
            return true;
          }
          return false;
        };
        util2.removeValue = function(arr, val) {
          var index = indexOf(arr, val);
          if (index !== -1) {
            return arr.splice(index, 1)[0];
          }
        };
        util2.documentOn = function(eventName, handler) {
          if (window2.addEventListener) {
            window2.addEventListener(eventName, handler, false);
          } else if (document.attachEvent) {
            document.attachEvent("on" + eventName, handler);
          }
        };
        util2.requestAnimationFrame = function() {
          return window2.requestAnimationFrame || window2.webkitRequestAnimationFrame || window2.mozRequestAnimationFrame || function(callback) {
            window2.setTimeout(callback, 1e3 / 60);
          };
        }();
        util2.noop = function() {
        };
        return util2;
      }();
      var KEY_MAP = {
        "ZERO": 48,
        "ONE": 49,
        "TWO": 50,
        "THREE": 51,
        "FOUR": 52,
        "FIVE": 53,
        "SIX": 54,
        "SEVEN": 55,
        "EIGHT": 56,
        "NINE": 57,
        "A": 65,
        "B": 66,
        "C": 67,
        "D": 68,
        "E": 69,
        "F": 70,
        "G": 71,
        "H": 72,
        "I": 73,
        "J": 74,
        "K": 75,
        "L": 76,
        "M": 77,
        "N": 78,
        "O": 79,
        "P": 80,
        "Q": 81,
        "R": 82,
        "S": 83,
        "T": 84,
        "U": 85,
        "V": 86,
        "W": 87,
        "X": 88,
        "Y": 89,
        "Z": 90,
        "ENTER": 13,
        "SHIFT": 16,
        "ESC": 27,
        "SPACE": 32,
        "LEFT": 37,
        "UP": 38,
        "RIGHT": 39,
        "DOWN": 40,
        "BACKSPACE": 8,
        "DELETE": 46,
        "TAB": 9,
        "TILDE": 192,
        "CTRL": 17
      };
      var TRANSPOSED_KEY_MAP = util.getTranspose(KEY_MAP);
      var keysDown = [];
      var Key = function() {
        "use strict";
        function Key2(keyCode) {
          this.keyCode = keyCode;
          this.cachedKeypressEvent = null;
        }
        Key2.prototype._downHandler = util.noop;
        Key2.prototype._upHandler = util.noop;
        Key2.prototype._pressHandler = util.noop;
        function bindOrFire(key, handlerName, opt_handler, opt_evt) {
          if (opt_handler) {
            key[handlerName] = opt_handler;
          } else {
            key[handlerName](opt_evt);
          }
        }
        Key2.prototype.isDown = function() {
          return util.indexOf(keysDown, this.keyCode) !== -1;
        };
        Key2.prototype.down = function(opt_handler) {
          bindOrFire(this, "_downHandler", opt_handler, this.cachedKeypressEvent);
        };
        Key2.prototype.up = function(opt_handler, opt_evt) {
          bindOrFire(this, "_upHandler", opt_handler, opt_evt);
        };
        Key2.prototype.press = function(opt_handler, opt_evt) {
          this.cachedKeypressEvent = opt_evt;
          bindOrFire(this, "_pressHandler", opt_handler, opt_evt);
        };
        Key2.prototype.unbindDown = function() {
          this._downHandler = util.noop;
        };
        Key2.prototype.unbindUp = function() {
          this._upHandler = util.noop;
        };
        Key2.prototype.unbindPress = function() {
          this._pressHandler = util.noop;
        };
        return Key2;
      }();
      var kd = function(keysDown2) {
        "use strict";
        var kd2 = {};
        kd2.Key = Key;
        var isRunning = false;
        var now = Date.now ? Date.now : function() {
          return +/* @__PURE__ */ new Date();
        };
        var previousUpdateTime = now();
        kd2.tick = function() {
          var i, len = keysDown2.length;
          for (i = 0; i < len; i++) {
            var keyCode = keysDown2[i];
            var keyName = TRANSPOSED_KEY_MAP[keyCode];
            if (keyName) {
              kd2[keyName].down();
            }
          }
        };
        kd2.run = function(handler) {
          isRunning = true;
          var currentTime = now();
          var timeSinceLastUpdate = currentTime - previousUpdateTime;
          util.requestAnimationFrame.call(window2, function() {
            if (!isRunning) {
              return;
            }
            kd2.run(handler);
            handler(timeSinceLastUpdate, currentTime);
          });
          previousUpdateTime = currentTime;
        };
        kd2.stop = function() {
          isRunning = false;
        };
        util.forEach(KEY_MAP, function(keyCode, keyName) {
          kd2[keyName] = new Key(keyCode);
        });
        util.documentOn("keydown", function(evt) {
          var keyCode = evt.keyCode;
          var keyName = TRANSPOSED_KEY_MAP[keyCode];
          var isNew = util.pushUnique(keysDown2, keyCode);
          var key = kd2[keyName];
          if (key) {
            var cachedKeypressEvent = key.cachedKeypressEvent || {};
            if (cachedKeypressEvent.ctrlKey || cachedKeypressEvent.shiftKey || cachedKeypressEvent.metaKey) {
              isNew = true;
            }
            if (isNew) {
              key.press(null, evt);
            }
          }
        });
        util.documentOn("keyup", function(evt) {
          var keyCode = util.removeValue(keysDown2, evt.keyCode);
          var keyName = TRANSPOSED_KEY_MAP[keyCode];
          if (keyName) {
            kd2[keyName].up(null, evt);
          }
        });
        util.documentOn("blur", function(evt) {
          util.forEach(keysDown2, function(keyCode) {
            var mappedKey = TRANSPOSED_KEY_MAP[keyCode];
            if (mappedKey) {
              kd2[mappedKey].up();
            }
          });
          keysDown2.length = 0;
        });
        return kd2;
      }(keysDown);
      if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = kd;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return kd;
        });
      } else {
        window2.kd = kd;
      }
    })(window);
  }
});
export default require_keydrown();
/*! Bundled license information:

keydrown/dist/keydrown.js:
  (*! keydrown - v1.2.8 - 2020-10-01 - http://jeremyckahn.github.com/keydrown *)
  (*!
   * @type Array.<string>
   *)
  (*!
   * The function to be invoked on every tick that the key is held down for.
   *
   * @type {function}
   *)
  (*!
   * The function to be invoked when the key is released.
   *
   * @type {function}
   *)
  (*!
   * The function to be invoked when the key is pressed.
   *
   * @type {function}
   *)
  (*!
   * Private helper function that binds or invokes a hander for `down`, `up',
   * or `press` for a `Key`.
   *
   * @param {Key} key
   * @param {string} handlerName
   * @param {function=} opt_handler If omitted, the handler is invoked.
   * @param {KeyboardEvent=} opt_evt If this function is being called by a
   * keyboard event handler, this is the raw KeyboardEvent Object provided from
   * the browser.
   *)
*/
//# sourceMappingURL=keydrown.js.map
